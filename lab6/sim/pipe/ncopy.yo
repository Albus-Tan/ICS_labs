                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Tanziming 520021910607
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 1. use iaddq:
                            | #		using iaddq V,rB will combine two instructions irmovq and addq
                            | #		into one step. Since there are many ++, -- operations in ys code,
                            | #		this change will be of great help. So I modify pipe-full.hcl to
                            | #		add iaddq and change all instruction with continously irmovq and
                            | #		addq to iaddq in ncopy.ys.
                            | #
                            | # 2. change order to remove instruction:
                            | #		For these lines below 
                            | #				iaddq $-1, %rdx
                            | #				......
                            | #				andq %rdx,%rdx
                            | #				jg Loop
                            | #		The order of ... and iaddq $-1, %rdx does not matter, so we can
                            | #		change the order of them to
                            | #				......
                            | #				iaddq $-1, %rdx
                            | #				andq %rdx,%rdx  # then we can remove this line
                            | #				jg Loop
                            | #		Considering we have already get the correct CC, we can remove last line,
                            | #		which means we reduce 1 step each loop.
                            | #
                            | # 3. remove xorq %rax,%rax
                            | #		Since the initial value of %rax is 0, we can simply remove this line at head.
                            | #
                            | # 4. loop unrolling:
                            | #		Since there is a loop in function, we can adopt loop unrolling
                            | #		to decrease loop times. After trying unlooping for 7,8,9 and
                            | #		10 times, I find that 10 times is the most efficient. Therefore I
                            | #		unloop for 10 times at last.
                            | #
                            | # 5. avoid load-use hazard in loop:
                            | #		For these lines below 
                            | #				mrmovq (%rdi), %r10
                            | #				rmmovq %r10, (%rsi)
                            | #		every time going through these two lines, we will have load-use
                            | #		hazard and generate one bubble, wasting one cycle. So we can change 
                            | #		order of instruction to make sure one other instruction between 
                            | #		these two. Then we can avoid load-use hazard.
                            | #				mrmovq (%rdi), %r10	# read val from src...
                            | #				mrmovq 8(%rdi), %r9	# load one more ahead
                            | #				rmmovq %r10, (%rsi)	# ...and store it to dst
                            | #		So I load one more ahead and store them in two different register.
                            | #		
                            | # 6. try to use jump table for the rest, with improvment
                            | #
                            | # 7. Inspired by binary tree, deal with rest under idea of tree, get better performance
                            | #
                            | # 8. avoid load-use hazard for the rest by trick in CC
                            | #
                            | # 9. change some instruction pos for slight improvment, including moving loop front of rest
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000:                      | test:  				# test len >= 10
0x000: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x00a: 72d401000000000000   | 	jl Judge			# if len >= 10, goto Loop:
                            | 
                            | # unloop for 10 times when len >= 10
0x013:                      | Loop:	
0x013: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x01d: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	
0x027: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x031: 62aa                 | 	andq %r10, %r10	
0x033: 714600000000000000   | 	jle Loop1
0x03c: c0f00100000000000000 | 	iaddq $1, %rax 
0x046:                      | Loop1:	
0x046: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x050: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x05a: 6299                 | 	andq %r9, %r9
0x05c: 716f00000000000000   | 	jle Loop2
0x065: c0f00100000000000000 | 	iaddq $1, %rax
0x06f:                      | Loop2:	
0x06f: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x079: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x083: 62aa                 | 	andq %r10, %r10	
0x085: 719800000000000000   | 	jle Loop3
0x08e: c0f00100000000000000 | 	iaddq $1, %rax 
0x098:                      | Loop3:	
0x098: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0a2: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0ac: 6299                 | 	andq %r9, %r9
0x0ae: 71c100000000000000   | 	jle Loop4
0x0b7: c0f00100000000000000 | 	iaddq $1, %rax
0x0c1:                      | Loop4:	
0x0c1: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0cb: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x0d5: 62aa                 | 	andq %r10, %r10	
0x0d7: 71ea00000000000000   | 	jle Loop5
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ea:                      | Loop5:	
0x0ea: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x0f4: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x0fe: 6299                 | 	andq %r9, %r9
0x100: 711301000000000000   | 	jle Loop6
0x109: c0f00100000000000000 | 	iaddq $1, %rax
0x113:                      | Loop6:	
0x113: 50973800000000000000 | 	mrmovq 56(%rdi), %r9
0x11d: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x127: 62aa                 | 	andq %r10, %r10	
0x129: 713c01000000000000   | 	jle Loop7
0x132: c0f00100000000000000 | 	iaddq $1, %rax
0x13c:                      | Loop7:	
0x13c: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x146: 40963800000000000000 | 	rmmovq %r9, 56(%rsi)
0x150: 6299                 | 	andq %r9, %r9	
0x152: 716501000000000000   | 	jle Loop8
0x15b: c0f00100000000000000 | 	iaddq $1, %rax
0x165:                      | Loop8:	
0x165: 50974800000000000000 | 	mrmovq 72(%rdi), %r9
0x16f: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)
0x179: 62aa                 | 	andq %r10, %r10	
0x17b: 718e01000000000000   | 	jle Loop9
0x184: c0f00100000000000000 | 	iaddq $1, %rax      
0x18e:                      | Loop9:	
0x18e: 40964800000000000000 | 	rmmovq %r9, 72(%rsi)
0x198: c0f75000000000000000 | 	iaddq $80, %rdi
0x1a2: c0f65000000000000000 | 	iaddq $80, %rsi	
0x1ac: 6299                 | 	andq %r9, %r9	
0x1ae: 710000000000000000   | 	jle test		
0x1b7: c0f00100000000000000 | 	iaddq $1, %rax
0x1c1: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x1cb: 751300000000000000   | 	jge Loop
                            | 
0x1d4:                      | Judge:
0x1d4: c0f20700000000000000 | 	iaddq $7, %rdx  # test len and 3
0x1de: 72f901000000000000   | 	jl LESS3
0x1e7: 762002000000000000   | 	jg MORE3
0x1f0: 735703000000000000   | 	je rest3
                            | 
0x1f9:                      | LESS3:
0x1f9: c0f20200000000000000 | 	iaddq $2, %rdx  # test len and 1
0x203: 73a903000000000000   | 	je rest1
0x20c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx  # test len and 2
0x216: 738003000000000000   | 	je rest2
0x21f: 90                   | 	ret
                            | 
0x220:                      | MORE3:
0x220: c0f2fdffffffffffffff | 	iaddq $-3, %rdx  # test len and 6
0x22a: 765802000000000000   | 	jg MORE6
0x233: 73dc02000000000000   | 	je rest6
0x23c: c0f20100000000000000 | 	iaddq $1, %rdx  # test len and 5
0x246: 722e03000000000000   | 	jl rest4
0x24f: 730503000000000000   | 	je rest5
                            | 
0x258:                      | MORE6:
0x258: c0f2feffffffffffffff | 	iaddq $-2, %rdx  # test len and 8
0x262: 72b302000000000000   | 	jl rest7
0x26b: 738a02000000000000   | 	je rest8
                            | 	
                            | # for rest of len
                            | # set cc for current case and
                            | # handle add iaddq $1, %rax the case before current
0x274:                      | rest9:
0x274: 50974000000000000000 | 	mrmovq 64(%rdi), %r9
0x27e: 40964000000000000000 | 	rmmovq %r9, 64(%rsi)
0x288: 6299                 | 	andq %r9, %r9
                            | 
0x28a:                      | rest8:
0x28a: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x294: 71a702000000000000   | 	jle rest8_
0x29d: c0f00100000000000000 | 	iaddq $1, %rax
0x2a7:                      | rest8_:
0x2a7: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x2b1: 62aa                 | 	andq %r10, %r10
                            | 
0x2b3:                      | rest7:
0x2b3: 50973000000000000000 | 	mrmovq 48(%rdi), %r9
0x2bd: 71d002000000000000   | 	jle rest7_
0x2c6: c0f00100000000000000 | 	iaddq $1, %rax
0x2d0:                      | rest7_:
0x2d0: 40963000000000000000 | 	rmmovq %r9, 48(%rsi)
0x2da: 6299                 | 	andq %r9, %r9
                            | 
0x2dc:                      | rest6:
0x2dc: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x2e6: 71f902000000000000   | 	jle rest6_
0x2ef: c0f00100000000000000 | 	iaddq $1, %rax
0x2f9:                      | rest6_:
0x2f9: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x303: 62aa                 | 	andq %r10, %r10
                            | 	
0x305:                      | rest5:
0x305: 50972000000000000000 | 	mrmovq 32(%rdi), %r9
0x30f: 712203000000000000   | 	jle rest5_
0x318: c0f00100000000000000 | 	iaddq $1, %rax
0x322:                      | rest5_:
0x322: 40962000000000000000 | 	rmmovq %r9, 32(%rsi)
0x32c: 6299                 | 	andq %r9, %r9
                            | 	
0x32e:                      | rest4:
0x32e: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x338: 714b03000000000000   | 	jle rest4_	
0x341: c0f00100000000000000 | 	iaddq $1, %rax
0x34b:                      | rest4_:
0x34b: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x355: 62aa                 | 	andq %r10, %r10
                            | 	
0x357:                      | rest3:
0x357: 50971000000000000000 | 	mrmovq 16(%rdi), %r9
0x361: 717403000000000000   | 	jle rest3_
0x36a: c0f00100000000000000 | 	iaddq $1, %rax
0x374:                      | rest3_:
0x374: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)
0x37e: 6299                 | 	andq %r9, %r9
                            | 	
0x380:                      | rest2:
0x380: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x38a: 719d03000000000000   | 	jle rest2_
0x393: c0f00100000000000000 | 	iaddq $1, %rax
0x39d:                      | rest2_:
0x39d: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x3a7: 62aa                 | 	andq %r10, %r10
                            | 	
0x3a9:                      | rest1:
0x3a9: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x3b3: 71c603000000000000   | 	jle rest1_
0x3bc: c0f00100000000000000 | 	iaddq $1, %rax
0x3c6:                      | rest1_:
0x3c6: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x3d0: 6288                 | 	andq %r8, %r8
0x3d2: 71e503000000000000   | 	jle Done
0x3db: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3e5:                      | Done:
0x3e5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3e6:                      | End:
                            | #/* $end ncopy-ys */
