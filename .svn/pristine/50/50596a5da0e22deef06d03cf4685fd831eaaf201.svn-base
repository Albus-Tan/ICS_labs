/*
 * 520021910607 Tanziming
 * proxy.c - ICS Web proxy
 *
 *
 */

#include "csapp.h"
#include <stdarg.h>
#include <sys/select.h>

#define DEBUG 0

FILE* logfp;

/*
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, char *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, size_t size);
void doProxy(int connfd, struct sockaddr_in *sockaddr);
void *thread(void *vargp);

// Rio wrappers
ssize_t Rio_readn_w(int fd, void* usrbuf, size_t n)
{
    ssize_t rc;
    if((rc = rio_readn(fd, usrbuf, n)) < 0){
        fprintf(stderr, "Rio_readn_w error:%s\n", strerror(errno));
        return 0;
    }
    return rc;
}

ssize_t Rio_readnb_w(rio_t *rp, void *usrbuf, size_t maxlen)
{
    ssize_t rc;
    if((rc = rio_readnb(rp, usrbuf, maxlen)) < 0){
        fprintf(stderr, "Rio_readnb_w error:%s\n", strerror(errno));
        return 0;
    }
    return rc;
}

ssize_t Rio_writen_w(int fd, void *usrbuf, size_t n)
{
    ssize_t c;
    if((c = rio_writen(fd, usrbuf, n)) != n){
        fprintf(stderr, "Rio_writen_w error:%s\n", strerror(errno));
        return 0;
    }
    return c;
}

ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen)
{
    ssize_t rc;
    if((rc = rio_readlineb(rp, usrbuf, maxlen)) < 0){
        fprintf(stderr, "Rio_readlineb_w error:%s\n", strerror(errno));
        return 0;
    }
    return rc;
}

typedef struct vargp {
    int connfd;
    struct sockaddr_in clientaddr;
} vargp_t;

void *thread(void *vargp)
{
    Pthread_detach(pthread_self());
    vargp_t* vargp_self = (vargp_t*) vargp;
    doProxy(vargp_self->connfd, &(vargp_self->clientaddr));
    Close(vargp_self->connfd);
    Free(vargp);
    return NULL;
}

/*
 * main - Main routine for the proxy program
 */
int main(int argc, char **argv)
{
    int listenfd, connfd;
    char hostname[MAXLINE], port[MAXLINE];
    socklen_t clientlen;
    struct sockaddr_in clientaddr;
    vargp_t* vargp;
    pthread_t tid;

    // Ignore SIGPIPE
    Signal(SIGPIPE,SIG_IGN);

    /* Check arguments */
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port number>\n", argv[0]);
        exit(0);
    }

    listenfd = Open_listenfd(argv[1]);
    while(1){
        vargp = Malloc(sizeof(vargp_t));
        clientlen = sizeof(clientaddr);
        vargp->connfd = Accept(listenfd, (SA*)&(vargp->clientaddr), &clientlen);
        Pthread_create(&tid, NULL, thread, vargp);
        Getnameinfo((SA *)&(vargp->clientaddr), clientlen, hostname, MAXLINE, port, MAXLINE, 0);
        if(DEBUG)
            printf("Accepted connection from (%s,%s)\n", hostname, port);
        // // main routine
        // doProxy(connfd, &clientaddr);
        // Close(connfd);
    }

    Close(listenfd);
    exit(0);
}

void doProxy(int connfd, struct sockaddr_in *sockaddr)
{
    char buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];
    rio_t rio_request, rio_response;
    int size = 0;

    if(DEBUG){
        printf("Service start:\n");
        printf("connfd %d\n", connfd);
    }

    // read request line and headers
    Rio_readinitb(&rio_request, connfd);
    Rio_readlineb_w(&rio_request, buf, MAXLINE);

    if(DEBUG){
        printf("Requset headers:\n");
        printf("%s", buf);
    }

    sscanf(buf, "%s %s %s", method, uri, version);

    if(DEBUG){
        printf("method: %s , uri: %s , version: %s\n", method, uri, version);
    }


    // parse URI
    char hostname[MAXLINE], pathname[MAXLINE], port[MAXLINE];
    if(parse_uri(uri, hostname, pathname, port) == -1){
        unix_error("parse_uri error\n");
        return;
    }

    // connect to end server as a client
    int clientfd = Open_clientfd(hostname, port);
    
    if(DEBUG){
        printf("Connect to end server as a client, clientfd: %d\n", clientfd);
    }

    // generate request
    char request[MAXLINE];
    sprintf(request, "%s /%s %s\r\n", method, pathname, version);

    if(DEBUG){
        printf("Generate request to end server, request: %s", request);
        printf("Start to send request to end server\n");
    }

    // send request to the end server
    if(Rio_writen_w(clientfd, request, strlen(request)) <= 0){
        fprintf(stderr, "Fail to send request\n");
        close(clientfd);
        return;
    }

    if(DEBUG){
        printf("Read and send header to the end server\n");
    }

    
    // read and send header to the end server
    ssize_t n, cnt = 0, content_len = 0;
    if((n = Rio_readlineb_w(&rio_request, buf, MAXLINE)) <= 0) return;
    while(strcmp(buf, "\r\n")){

        // get content length
        if(!strncasecmp(buf, "Content-Length: ", 14)){
            sscanf(buf+15, "%zu", &content_len);
            if(DEBUG){
            printf("Receive Content-Length:  %d\n", content_len);
        }
        }

        cnt += n;
        if(DEBUG){
            printf("%s", buf);
        }
        if(Rio_writen_w(clientfd, buf, strlen(buf)) <= 0) return;
        if((n = Rio_readlineb_w(&rio_request, buf, MAXLINE)) <= 0) return;
    }
    cnt += n;
    if(DEBUG){
        printf("%s", buf);
    }
    if(Rio_writen_w(clientfd, buf, strlen(buf)) <= 0) return;

    // send body if method POST
    if(strcasecmp(method, "GET")){
        for(int i = 0; i < content_len; ++i){
            if(Rio_readnb_w(&rio_request, buf, 1) == 0) return;
            if(Rio_writen_w(clientfd,buf,1) == -1) return;
        }
    }


    if(DEBUG){
        printf("Waiting for response\n");
    }

    // receive response from the end server
    n = 0;
    Rio_readinitb(&rio_response, clientfd);
    char response[MAXLINE];
    size_t content_length = 0;
    while((n = Rio_readlineb_w(&rio_response, response, MAXLINE)) != 0){

        if(DEBUG){
            printf("Receive response header from end server, response header: %s", response);
            printf("Start to send response header to browser\n");
        }

        // add size
        size += n;

        // get content length
        if(!strncasecmp(response, "Content-Length: ", 14)){
            sscanf(response+15, "%zu", &content_length);
            if(DEBUG){
            printf("Receive Content-Length:  %d\n", content_length);
        }
        }

        // forward to browser
        if(Rio_writen_w(connfd, response, n) == -1) return;

        // check end
        if(!strncmp(response, "\r\n", 2)) break;
    }

    if(DEBUG){
            printf("Receive ALL response header from end server !\n");
            printf("Start to receive response body\n");
    }

    // receive response body from end server
    if(Rio_readnb_w(&rio_response, response, content_length) == 0) return;
    // forward to browser
    if(Rio_writen_w(connfd, response, content_length) == -1) return;
    size += content_length;

    // log on screen
    char logstring[MAXLINE];
    format_log_entry(logstring, sockaddr, uri, size);
    printf("%s\n",logstring);

    fflush(stdout);

    Close(clientfd);

}


/*
 * parse_uri - URI parser
 *
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, char *port)
{
    char *hostbegin;
    char *hostend;
    char *pathbegin;
    int len;

    if (strncasecmp(uri, "http://", 7) != 0) {
        hostname[0] = '\0';
        return -1;
    }

    if(DEBUG){
        printf("parse_uri: http:// \n");
    }

    /* Extract the host name */
    hostbegin = uri + 7;
    hostend = strpbrk(hostbegin, " :/\r\n\0");
    if (hostend == NULL)
        return -1;
    len = hostend - hostbegin;
    strncpy(hostname, hostbegin, len);
    hostname[len] = '\0';

    if(DEBUG){
        printf("parse_uri: hostname get, %s\n", hostname);
    }

    /* Extract the port number */
    if (*hostend == ':') {
        char *p = hostend + 1;
        while (isdigit(*p))
            *port++ = *p++;
        *port = '\0';
    } else {
        strcpy(port, "80");
    }

    if(DEBUG){
        printf("parse_uri: port number get, %s\n", port);
    }

    /* Extract the path */
    pathbegin = strchr(hostbegin, '/');
    if (pathbegin == NULL) {
        pathname[0] = '\0';
    }
    else {
        pathbegin++;
        strcpy(pathname, pathbegin);
    }

    if(DEBUG){
        printf("parse_uri: path name get, %s\n", pathname);
    }

    return 0;
}

/*
 * format_log_entry - Create a formatted log entry in logstring.
 *
 * The inputs are the socket address of the requesting client
 * (sockaddr), the URI from the request (uri), the number of bytes
 * from the server (size).
 */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr,
                      char *uri, size_t size)
{
    time_t now;
    char time_str[MAXLINE];
    char host[INET_ADDRSTRLEN];

    /* Get a formatted time string */
    now = time(NULL);
    strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

    if (inet_ntop(AF_INET, &sockaddr->sin_addr, host, sizeof(host)) == NULL)
        unix_error("Convert sockaddr_in to string representation failed\n");

    /* Return the formatted log entry string */
    sprintf(logstring, "%s: %s %s %zu", time_str, host, uri, size);
}
